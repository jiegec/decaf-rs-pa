// Top level

topLevel    ::= classDef+ ;
classDef    ::= 'abstract'? 'class' id ('extends' id)? '{' field* '}' ;
field       ::= varDef | methodDef ;
varDef      ::= var ';' ;
methodDef   ::= 'static'? type id '(' varList ')' stmtBlock
              | 'abstract' type id '(' varList ')' ';' ;
var         ::= type id ;
varList     ::= var (',' var)* | _ ;

// Types

type        ::= 'int' | 'bool' | 'string' | 'void' | 'class' id
              | type '[' ']'
              | type '(' typeList ')' ;
typeList    ::= (type (',' type)*)? ;

// Statements

stmt        ::= stmtBlock
              | simple ';'
              | 'if' '(' expr ')' stmt ('else' stmt)?
              | 'while' '(' expr ')' stmt
              | 'for' '(' simple ';' expr ';' simple ')' stmt
              | 'break' ';'
              | 'return' expr? ';'
              | 'Print' '(' exprList ')' ';' ;

stmtBlock   ::= '{' stmt* '}' ;

simple      ::= var ('=' expr)? | 'var' id '=' expr | lValue '=' expr | expr | _ ;
lValue      ::= (expr '.')? id | expr '[' expr ']' ;

// Expressions

expr        ::= lit
              | 'this'
              | lValue
              | expr '(' exprList ')'
              | '(' expr ')'
              | unaryOp expr
              | expr binaryOp expr
              | '(' 'class' id ')' expr
              | 'ReadInteger' '(' ')'
              | 'ReadLine' '(' ')'
              | 'new' id '(' ')'
              | 'new' type '[' expr ']'
              | 'instanceof' '(' expr ',' id ')'
              | 'fun' '(' varList ')' '=>' expr
              | 'fun' '(' varList ')' stmtBlock;

lit         ::= '114114' | 'true' | 'null' | 'string' ;
unaryOp     ::= '-' | '!' ;
binaryOp    ::= '+' | '-' | '*' | '/' | '%' | '==' | '!=' | '<=' | '<' | '>=' | '>' | '&&' | '||' ;
exprList    ::= expr (',' expr)* | _ ;

id          ::= 'someId' ;